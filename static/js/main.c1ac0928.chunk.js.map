{"version":3,"sources":["components/MessageForm.jsx","components/MyMessage.jsx","components/TheirMessage.jsx","components/ChatFeed.jsx","components/LoginForm.jsx","App.js","index.js"],"names":["MessageForm","props","useState","value","setValue","chatId","creds","handleSubmit","event","preventDefault","text","trim","length","sendMessage","className","onSubmit","placeholder","onChange","target","isTyping","htmlFor","PictureOutlined","type","multiple","id","style","display","files","SendOutlined","MyMessage","message","attachments","src","file","alt","float","color","marginRight","backgroundColor","TheirMessage","lastMessage","isFirstMessageByuser","sender","username","backgroundImage","avatar","marginLeft","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","title","keys","Object","key","lastMessageKey","width","renderMessages","height","LoginForm","setUsername","password","setPassword","error","setError","e","a","authObject","axios","get","headers","localStorage","setItem","window","location","reload","required","align","App","getItem","projectID","userSecret","renderChatFeed","chatAppPorps","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c1ac0928.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport {sendMessage, isTyping} from \"react-chat-engine\";\r\nimport { SendOutlined, PictureOutlined } from \"@ant-design/icons\";\r\n\r\nconst MessageForm = (props) => {\r\n    const [value, setValue] = useState('');\r\n    const {chatId, creds} = props;\r\n\r\n    const handleSubmit = (event) =>{\r\n        event.preventDefault();\r\n        const  text  = value.trim();\r\n        if(text.length > 0 ) sendMessage(creds, chatId, { text });\r\n        setValue('');\r\n    }\r\n\r\n    const handleChange = (event) =>{\r\n        setValue(event.target.value);\r\n\r\n        isTyping(props, chatId );\r\n        \r\n    }\r\n\r\n    const handleUpload = (event) => {\r\n        sendMessage(creds, chatId, { files: event.target.files, text: '' });\r\n    }\r\n\r\n    return (\r\n        <form className=\"message-form\" onSubmit={handleSubmit}>\r\n            <input \r\n                className=\"message-input\"\r\n                placeholder=\"type something...\"\r\n                value={value}\r\n                onChange={handleChange}\r\n                onSubmit={handleSubmit}\r\n            />\r\n            <label htmlFor=\"upload-button\">\r\n                <span className=\"image-button\">\r\n                        <PictureOutlined className=\"picture-icon\" />\r\n                </span>\r\n            </label>\r\n            <input \r\n                type=\"file\"\r\n                multiple={ false }\r\n                id=\"upload-button\"\r\n                style={{display: 'none' }}\r\n                onChange={handleUpload}\r\n            />\r\n            <button type=\"submit\" className=\"send-button\">\r\n                <SendOutlined className=\"send-icon\" />\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default MessageForm;","const MyMessage = ({message}) => {\r\n    if(message?.attachments?.length >0){\r\n        return (\r\n            <img \r\n                src={message.attachments[0].file}\r\n                alt=\"message-attachment\"\r\n                className=\"message-image\"\r\n                style={{float: 'right'}}\r\n            />\r\n        )\r\n    }\r\n    return (\r\n        <div className=\"message\" style={{float: 'right', color: 'white', marginRight: '18px', backgroundColor: '#3B2A50' }}>\r\n             {message.text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default  MyMessage;","const TheirMessage = ({ message, lastMessage }) => {\r\n    const isFirstMessageByuser = !lastMessage || lastMessage.sender.username !== message.sender.username;\r\n    return (\r\n        <div className=\"message-row\">\r\n            {isFirstMessageByuser && (\r\n                <div\r\n                    className=\"message-avatar\"\r\n                    style={{ backgroundImage: `url(${message?.sender?.avatar})` }}\r\n                />\r\n            )}\r\n            {message?.attachments?.length > 0\r\n                ? (\r\n                    <img\r\n                        src={message.attachments[0].file}\r\n                        alt=\"message-attachment\"\r\n                        className=\"message-image\"\r\n                        style={{ marginLeft: isFirstMessageByuser? '4px' : '48px'}}\r\n                    />\r\n                ) : (\r\n                    <div className=\"message\" style={{ float: 'left', backgroundColor: '#CABCDC', marginLeft: isFirstMessageByuser? '4px' : '48px'}}>\r\n                        {message.text}\r\n                    </div>\r\n                )\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TheirMessage;","import MessageForm from \"./MessageForm\";\r\nimport MyMessage from \"./MyMessage\";\r\nimport TheirMessage from \"./TheirMessage\";\r\n\r\nconst ChatFeed = (props) => {\r\n    const {chats, activeChat, userName, messages } = props;\r\n    const chat = chats && chats[activeChat];\r\n\r\n    const renderReadReceipts = (message, isMyMessage) => {\r\n       return chat.people.map((person, index) => person.last_read === message.id && (\r\n            <div \r\n                key = {`read_${index}`}\r\n                className=\"read-receipt\"\r\n                style={{\r\n                    float: isMyMessage? 'right' : 'left',\r\n                    backgroundImage: `url(${person?.person?.avatar})`\r\n                }}\r\n            />\r\n        ))\r\n    } \r\n\r\n    const renderMessages = () => {\r\n        const keys = Object.keys(messages);\r\n        \r\n        return keys.map((key,index) => {\r\n            const message = messages[key];\r\n            const lastMessageKey = index === 0 ? null: keys[index-1];\r\n            const isMyMessage = userName === message.sender.username;\r\n\r\n            return(\r\n                <div key={`msg_${index}`} style={{width: '100%'}}>\r\n                    <div className = \"message-block\">\r\n                    {\r\n                        isMyMessage \r\n                        ? <MyMessage message = {message}/> \r\n                        : <TheirMessage message = {message} lastMessage = {messages[lastMessageKey]}/>\r\n                    }\r\n\r\n                    </div>\r\n                    <div className=\"read-receipts\" style= {{marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px',}}> \r\n                    {renderReadReceipts(message, isMyMessage)}\r\n                    </div>\r\n\r\n                </div>\r\n            );\r\n        })\r\n    }\r\n\r\n    if(!chat) return 'Loading...';\r\n    return (\r\n        <div className=\"chat-feed\">\r\n            <div className=\"chat-title-container\">\r\n                <div className=\"chat-title\" >{ chat.title }</div>\r\n                <div className=\"chat-subtitle\">\r\n                    {chat.people.map((person)=>`${person.person.username}`)}\r\n                </div>\r\n            </div>\r\n            {renderMessages()}\r\n            <div style={{height: '100px'}} />\r\n            <div className=\"message-form-container\">\r\n                <MessageForm { ...props} chatId={activeChat}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatFeed;","import { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst LoginForm = () => {\r\n    const[username, setUsername] = useState('');\r\n    const[password, setPassword] = useState('');\r\n    const[error, setError] = useState('');\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const authObject = {'Project-ID':\"1fc3f273-8da1-46d0-9790-111f62d6a785\", 'User-Name': username, 'User-Secret': password }\r\n        try{\r\n            await axios.get('https://api.chatengine.io/chats', {headers: authObject});\r\n            localStorage.setItem('username', username);\r\n            localStorage.setItem('password', password);\r\n\r\n            window.location.reload();\r\n        }catch(error){\r\n            setError('OOPS!! incorect credentials.');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div className=\"form\">\r\n                <h1 className=\"title\">Let's Chat</h1>\r\n                <form onSubmit={handleSubmit}>\r\n                    <input type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)} className=\"input\" placeholder=\"Username\" required/>\r\n                    <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} className=\"input\" placeholder=\"Password\" required/>\r\n                    <div align=\"center\">\r\n                        <button type=\"submit\" className=\"button\">\r\n                            <span>Start chatting</span>\r\n                        </button>\r\n                    </div>\r\n                    <h2 className=\"error\">{error}</h2>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoginForm;","import React from \"react\";\r\nimport { ChatEngine } from 'react-chat-engine';\r\nimport './App.css';\r\nimport ChatFeed from './components/ChatFeed';\r\nimport LoginForm from './components/LoginForm';\r\n\r\nconst App = () => {\r\n    if(!localStorage.getItem('username')) return <LoginForm />\r\n    return (\r\n        <ChatEngine \r\n            height=\"100vh\"\r\n            projectID=\"1fc3f273-8da1-46d0-9790-111f62d6a785\"\r\n            userName={localStorage.getItem('username')}\r\n            userSecret={localStorage.getItem('password')}\r\n            renderChatFeed={(chatAppPorps)=> <ChatFeed {...chatAppPorps}/>}\r\n\r\n        />\r\n    );\r\n\r\n}\r\n\r\nexport default App;","import React from  'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}